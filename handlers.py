import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from config import CATEGORIES, CATEGORY_INSTRUCTIONS, OWNER_IDS
# AI module removed - all messages go to admins

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Conversation states
WAITING_FOR_MESSAGE = 1
IN_DIALOG = 2

# Global storage for active dialogs
# Format: {user_id: {'admin_id': admin_id, 'category': category}}
active_dialogs = {}

def start_command(update: Update, context: CallbackContext) -> None:
    """Handle the /start command and show the main menu."""
    keyboard = []
    
    # Create inline keyboard with category buttons
    for key, value in CATEGORIES.items():
        keyboard.append([InlineKeyboardButton(value, callback_data=key)])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    if update.message:
        update.message.reply_text(welcome_text, reply_markup=reply_markup)

def button_callback(update: Update, context: CallbackContext) -> int:
    """Handle button callbacks from the inline keyboard."""
    query = update.callback_query
    if query:
        query.answer()
        
        category = query.data
        
        if category in CATEGORIES:
            # Store the selected category in user context
            context.user_data['selected_category'] = category
            
            # Get instruction for the selected category
            instruction = CATEGORY_INSTRUCTIONS.get(category, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            
            # Create back button
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            response_text = (
                f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES[category]}\n\n"
                f"{instruction}\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
            )
            
            query.edit_message_text(response_text, reply_markup=reply_markup)
            return WAITING_FOR_MESSAGE
        
        elif category == "back_to_menu":
            # End any active dialog and return to main menu
            user = update.effective_user
            if user and user.id in active_dialogs:
                del active_dialogs[user.id]
            
            keyboard = []
            for key, value in CATEGORIES.items():
                keyboard.append([InlineKeyboardButton(value, callback_data=key)])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            welcome_text = (
                "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:"
            )
            
            query.edit_message_text(welcome_text, reply_markup=reply_markup)
            return ConversationHandler.END
        
        elif category == "end_dialog":
            # End active dialog
            user = update.effective_user
            if user and user.id in active_dialogs:
                admin_id = active_dialogs[user.id]['admin_id']
                del active_dialogs[user.id]
                
                # Notify admin about dialog end
                try:
                    context.bot.send_message(
                        chat_id=admin_id,
                        text=f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥."
                    )
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin_id} about dialog end: {e}")
                
                # Notify other admins that dialog is ended and user is available
                for other_admin_id in OWNER_IDS:
                    if other_admin_id != admin_id:
                        try:
                            context.bot.send_message(
                                chat_id=other_admin_id,
                                text=f"‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.first_name} ({user.id}) –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π."
                            )
                        except Exception as e:
                            logger.error(f"Failed to notify admin {other_admin_id} about dialog end: {e}")
                
                query.edit_message_text(
                    "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è."
                )
            else:
                query.edit_message_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END
    
    return ConversationHandler.END

def handle_user_message(update: Update, context: CallbackContext) -> int:
    """Handle user messages and forward them to owners."""
    user = update.effective_user
    if not user or not update.message or not update.message.text:
        return ConversationHandler.END
        
    message_text = update.message.text
    user_name = f"{user.first_name}{' ' + user.last_name if user.last_name else ''}"
    
    # In private chats (conversation flow), all messages go to admins
    # AI only works in groups, not in private conversation flow
    selected_category = 'other'
    if context.user_data:
        selected_category = context.user_data.get('selected_category', 'other')
    category_name = CATEGORIES.get(selected_category, '–ü—Ä–æ—á–µ–µ')
    
    # Create message to forward to owners with unique ID for replies
    message_id = f"msg_{user.id}_{update.message.message_id}"
    forward_message = (
        f"üì® –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{message_id}\n\n"
        f"üë§ –û—Ç: {user.first_name}"
        f"{' ' + user.last_name if user.last_name else ''}\n"
        f"üÜî ID: {user.id}\n"
        f"üë§ Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}\n\n"
        f"üìã –î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    
    try:
        # Forward message to all owners
        for owner_id in OWNER_IDS:
            try:
                sent_message = context.bot.send_message(
                    chat_id=owner_id,
                    text=forward_message
                )
                # Store mapping for replies
                context.bot_data[f"reply_{sent_message.message_id}"] = {
                    'user_id': user.id,
                    'original_message_id': message_id
                }
            except Exception as e:
                logger.error(f"Failed to send message to owner {owner_id}: {e}")
        
        # Send confirmation to user
        confirmation_text = (
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n\n"
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. "
            "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!"
        )
        
        update.message.reply_text(confirmation_text)
        
        logger.info(f"Message from user {user.id} ({user.username}) forwarded to owners")
        
    except Exception as e:
        logger.error(f"Failed to forward message to owners: {e}")
        
        error_text = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        
        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            update.message.reply_text(error_text, reply_markup=reply_markup)
    
    # Clear the selected category
    context.user_data.clear()
    return ConversationHandler.END

def cancel_conversation(update: Update, context: CallbackContext) -> int:
    """Cancel the current conversation."""
    if update.message:
        update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.clear()
    return ConversationHandler.END

def help_command(update: Update, context: CallbackContext) -> None:
    """Handle the /help command."""
    user = update.effective_user
    
    if user and user.id in OWNER_IDS:
        # Admin help
        help_text = (
            "ü§ñ –ü–æ–º–æ—â—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/dialogs - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏\n\n"
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∏–∞–ª–æ–≥–∞–º–∏:\n"
            "1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ\n"
            "2. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (reply) –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞\n"
            "3. –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç–∏–≤—à–∏–π –∞–¥–º–∏–Ω –≤–µ–¥–µ—Ç –¥–∏–∞–ª–æ–≥\n"
            "4. –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∫–Ω–æ–ø–∫–æ–π"
        )
    else:
        # User help
        help_text = (
            "ü§ñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
            "2. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "3. –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
            "‚Ä¢ –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤–æ —Ñ–ª—É–¥\n"
            "‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –ö—Ä–∏—Ç–∏–∫–∞\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –°–æ—é–∑—ã\n"
            "‚Ä¢ –†–µ—Å—Ç\n"
            "‚Ä¢ –ñ–∞–ª–æ–±—ã\n"
            "‚Ä¢ –ü—Ä–æ—á–µ–µ"
        )
    
    if update.message:
        update.message.reply_text(help_text)

def dialogs_command(update: Update, context: CallbackContext) -> None:
    """Show active dialogs to admin."""
    user = update.effective_user
    if not user or user.id not in OWNER_IDS:
        return
    
    if not active_dialogs:
        update.message.reply_text("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ—Ç.")
        return
    
    dialog_list = "üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:\n\n"
    for user_id, dialog_info in active_dialogs.items():
        admin_id = dialog_info['admin_id']
        category = dialog_info.get('category', 'other')
        category_name = CATEGORIES.get(category, '–ü—Ä–æ—á–µ–µ')
        
        dialog_list += (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_id}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"{'üü¢ –í–∞—à –¥–∏–∞–ª–æ–≥' if admin_id == user.id else 'üî¥ –î–∏–∞–ª–æ–≥ –∫–æ–ª–ª–µ–≥–∏'}\n\n"
        )
    
    update.message.reply_text(dialog_list)

def handle_owner_reply(update: Update, context: CallbackContext) -> None:
    """Handle replies from owners to user messages."""
    user = update.effective_user
    if not user or user.id not in OWNER_IDS:
        return
    
    if not update.message or not update.message.reply_to_message:
        return
    
    reply_to_message_id = update.message.reply_to_message.message_id
    reply_data = context.bot_data.get(f"reply_{reply_to_message_id}")
    
    if not reply_data:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    user_id = reply_data['user_id']
    message_id = reply_data['original_message_id']
    reply_text = update.message.text
    
    # Check if user already has active dialog with another admin
    if user_id in active_dialogs and active_dialogs[user_id]['admin_id'] != user.id:
        existing_admin_id = active_dialogs[user_id]['admin_id']
        update.message.reply_text(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–µ–¥–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {existing_admin_id}.\n"
            f"–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–æ–ª–ª–µ–≥–æ–π."
        )
        return
    
    try:
        # Start or continue dialog session
        active_dialogs[user_id] = {
            'admin_id': user.id,
            'category': reply_data.get('category', 'other')
        }
        
        # Send reply to user with dialog controls
        response_message = (
            f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            f"{reply_text}\n\n"
            f"üí¨ –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ."
        )
        
        # Create dialog control buttons
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_dialog")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        context.bot.send_message(
            chat_id=user_id,
            text=response_message,
            reply_markup=reply_markup
        )
        
        # Notify other admins about started dialog
        for admin_id in OWNER_IDS:
            if admin_id != user.id:
                try:
                    context.bot.send_message(
                        chat_id=admin_id,
                        text=f"üí¨ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.first_name} ({user.id}) –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}."
                    )
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin_id} about dialog start: {e}")
        
        # Confirm to owner
        update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é! –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç. –î—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")
        
        logger.info(f"Owner {user.id} started dialog with user {user_id} for message {message_id}")
        
    except Exception as e:
        logger.error(f"Failed to send reply to user {user_id}: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

def handle_dialog_message(update: Update, context: CallbackContext) -> None:
    """Handle messages in active dialog."""
    user = update.effective_user
    if not user or not update.message or not update.message.text:
        return
    
    # Check if user is in active dialog
    if user.id not in active_dialogs:
        return
    
    dialog_info = active_dialogs[user.id]
    admin_id = dialog_info['admin_id']
    message_text = update.message.text
    
    try:
        # Forward message to admin
        forward_message = (
            f"üí¨ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞\n\n"
            f"üë§ –û—Ç: {user.first_name}"
            f"{' ' + user.last_name if user.last_name else ''}\n"
            f"üÜî ID: {user.id}\n"
            f"üë§ Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}\n\n"
            f"üìã –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞"
        )
        
        sent_message = context.bot.send_message(
            chat_id=admin_id,
            text=forward_message
        )
        
        # Store mapping for admin replies
        context.bot_data[f"reply_{sent_message.message_id}"] = {
            'user_id': user.id,
            'original_message_id': f"dialog_{user.id}_{update.message.message_id}",
            'category': dialog_info['category']
        }
        
        # Confirm to user
        confirmation_text = "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!"
        
        # Add dialog control buttons
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_dialog")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(confirmation_text, reply_markup=reply_markup)
        
        logger.info(f"Dialog message from user {user.id} forwarded to admin {admin_id}")
        
    except Exception as e:
        logger.error(f"Failed to forward dialog message: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

def handle_direct_message(update: Update, context: CallbackContext) -> None:
    """Handle direct messages outside of conversation."""
    user = update.effective_user
    if not user or not update.message or not update.message.text:
        return
    
    chat = update.effective_chat
    
    # Check if user is in active dialog
    if user.id in active_dialogs:
        handle_dialog_message(update, context)
        return
    
    # For private chats, redirect to menu
    if chat and chat.type == 'private':
        update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
    
    # For group chats, bot doesn't respond automatically (no AI)
    # Users in groups should use /start to contact admins
